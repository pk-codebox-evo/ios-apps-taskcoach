# -*- python -*-

c = BuildmasterConfig = {}

BASEURL = 'http://taskcoach.svn.sourceforge.net/svnroot/taskcoach/'

PASSWORD = file('.passwd', 'rb').readlines()[0].strip()

CURRENTRELEASE='0_78'

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave

c['slaves'] = [BuildSlave("WinXPSP3", PASSWORD, max_builds=1),
               BuildSlave("Ubuntu8", PASSWORD, max_builds=1),
               BuildSlave("Ubuntu9", PASSWORD, max_builds=1),
               BuildSlave("Fedora8", PASSWORD, max_builds=1),
               BuildSlave("Fedora11", PASSWORD, max_builds=1),
               BuildSlave("MacOS", PASSWORD, max_builds=1)]

c['slavePortnum'] = 9989

####### CHANGESOURCES

# SourceForge does not (yet) provide a buildbot notification
# post-commit hook. There is a feature request for this though
# (https://sourceforge.net/tracker/?func=detail&aid=1633682&group_id=1&atid=350001)

#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

from buildbot.changes.svnpoller import SVNPoller, split_file_branches
c['change_source'] = SVNPoller(BASEURL,
                               pollinterval=10*60,
                               split_file=split_file_branches)

####### SCHEDULERS

from buildbot.scheduler import Scheduler

c['schedulers'] = []
c['schedulers'].append(Scheduler(name="TrunkWin32", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["win32-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseWin32", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["win32-rel"]))
c['schedulers'].append(Scheduler(name="iPhone2Win32", branch='branches/Feature_iPhone_2',
                                 treeStableTimer=0,
                                 builderNames=["win32-iphone"]))

c['schedulers'].append(Scheduler(name="TrunkUbuntu8", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["ubuntu8-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseUbuntu8", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["ubuntu8-rel"]))
c['schedulers'].append(Scheduler(name="iPhone2Ubuntu8", branch='branches/Feature_iPhone_2',
                                 treeStableTimer=0,
                                 builderNames=["ubuntu8-iphone"]))

c['schedulers'].append(Scheduler(name="TrunkUbuntu9", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["ubuntu9-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseUbuntu9", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["ubuntu9-rel"]))
c['schedulers'].append(Scheduler(name="iPhone2Ubuntu9", branch='branches/Feature_iPhone_2',
                                 treeStableTimer=0,
                                 builderNames=["ubuntu9-iphone"]))

c['schedulers'].append(Scheduler(name="TrunkFedora8", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["fedora8-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseFedora8", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["fedora8-rel"]))
c['schedulers'].append(Scheduler(name="iPhone2Fedora8", branch='branches/Feature_iPhone_2',
                                 treeStableTimer=0,
                                 builderNames=["fedora8-iphone"]))

c['schedulers'].append(Scheduler(name="TrunkFedora11", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["fedora11-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseFedora11", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["fedora11-rel"]))
c['schedulers'].append(Scheduler(name="iPhone2Fedora11", branch='branches/Feature_iPhone_2',
                                 treeStableTimer=0,
                                 builderNames=["fedora11-iphone"]))

c['schedulers'].append(Scheduler(name="TrunkMacOS", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["macos-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseMacOS", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["macos-rel"]))
c['schedulers'].append(Scheduler(name="iPhone2MacOS", branch='branches/Feature_iPhone_2',
                                 treeStableTimer=0,
                                 builderNames=["macos-iphone"]))

####### BUILDERS

import os, sys
sys.path.insert(0, os.getcwd())
import tcbuild

from buildbot.process import factory
from buildbot.steps.source import SVN
from buildbot.steps.shell import Compile

c['builders'] = []

f = factory.BuildFactory()

f.addStep(SVN(baseURL=BASEURL))
f.addStep(tcbuild.Cleanup())
f.addStep(tcbuild.Revision())
f.addStep(tcbuild.UnitTests())
f.addStep(tcbuild.Coverage())
f.addStep(tcbuild.UploadCoverage())
f.addStep(tcbuild.IntegrationTests())
f.addStep(tcbuild.LanguageTests())
f.addStep(tcbuild.BuildEXE())
f.addStep(tcbuild.UploadEXE())
f.addStep(tcbuild.DistributionTests())

b = {'name': "win32-rel",
      'slavename': "WinXPSP3",
      'builddir': "rel-win32",
      'factory': f,
      }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(baseURL=BASEURL))
f.addStep(tcbuild.Cleanup())
f.addStep(tcbuild.Revision())
f.addStep(tcbuild.UnitTests())
f.addStep(tcbuild.Epydoc())
f.addStep(tcbuild.UploadDoc())
f.addStep(tcbuild.Coverage())
f.addStep(tcbuild.UploadCoverage())
f.addStep(tcbuild.IntegrationTests())
f.addStep(tcbuild.LanguageTests())
f.addStep(tcbuild.BuildSource())
f.addStep(tcbuild.UploadSourceTar())
f.addStep(tcbuild.UploadSourceZip())
f.addStep(tcbuild.BuildDEB())
f.addStep(tcbuild.UploadDEB())
f.addStep(tcbuild.DistributionTests())

b = {'name': "ubuntu8-rel",
     'slavename': "Ubuntu8",
     'builddir': "rel-ubuntu8",
     'factory': f,
     }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(baseURL=BASEURL))
f.addStep(tcbuild.Cleanup())
f.addStep(tcbuild.Revision())
f.addStep(tcbuild.UnitTests())
f.addStep(tcbuild.Epydoc())
f.addStep(tcbuild.UploadDoc())
f.addStep(tcbuild.Coverage())
f.addStep(tcbuild.UploadCoverage())
f.addStep(tcbuild.IntegrationTests())
f.addStep(tcbuild.LanguageTests())
f.addStep(tcbuild.BuildSource())
#f.addStep(tcbuild.UploadSourceTar())
#f.addStep(tcbuild.UploadSourceZip())
f.addStep(tcbuild.BuildDEB())
#f.addStep(tcbuild.UploadDEB())
f.addStep(tcbuild.DistributionTests())

b = {'name': "ubuntu9-rel",
     'slavename': "Ubuntu9",
     'builddir': "rel-ubuntu9",
     'factory': f,
     }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(baseURL=BASEURL))
f.addStep(tcbuild.Cleanup())
f.addStep(tcbuild.Revision())
f.addStep(tcbuild.UnitTests())
f.addStep(tcbuild.Coverage())
f.addStep(tcbuild.UploadCoverage())
f.addStep(tcbuild.IntegrationTests())
f.addStep(tcbuild.LanguageTests())
f.addStep(tcbuild.BuildRPM())
f.addStep(tcbuild.UploadRPM())
f.addStep(tcbuild.UploadSRPM())
# The RPM build somehow prevents the following Fedora build if we
# don't clean up things...
f.addStep(tcbuild.Cleanup())
f.addStep(tcbuild.Revision())
f.addStep(tcbuild.BuildFedora8())
f.addStep(tcbuild.UploadFedora8())
f.addStep(tcbuild.DistributionTests())

b = {'name': "fedora8-rel",
     'slavename': "Fedora8",
     'builddir': "rel-redora8",
     'factory': f,
     }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(baseURL=BASEURL))
f.addStep(tcbuild.Cleanup())
f.addStep(tcbuild.Revision())
## f.addStep(tcbuild.UnitTests())
## f.addStep(tcbuild.Coverage())
## f.addStep(tcbuild.UploadCoverage())
f.addStep(tcbuild.IntegrationTests())
f.addStep(tcbuild.LanguageTests())
f.addStep(tcbuild.BuildFedora11())
f.addStep(tcbuild.UploadFedora11())
f.addStep(tcbuild.DistributionTests())

b = {'name': "fedora11-rel",
     'slavename': "Fedora11",
     'builddir': "rel-redora11",
     'factory': f,
     }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(baseURL=BASEURL))
f.addStep(tcbuild.Cleanup())
f.addStep(tcbuild.Revision())
## f.addStep(tcbuild.UnitTests())
## f.addStep(tcbuild.IntegrationTests())
f.addStep(tcbuild.LanguageTests())
f.addStep(tcbuild.BuildDMG())
f.addStep(tcbuild.UploadDMG())
f.addStep(tcbuild.DistributionTests())

b = {'name': "macos-rel",
     'slavename': "MacOS",
     'builddir': "rel-macos",
     'factory': f,
     }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(svnurl=BASEURL + 'trunk'))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.Revision(workdir='build/taskcoach'))
f.addStep(tcbuild.UnitTests(workdir='build/taskcoach'))
f.addStep(tcbuild.Coverage(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadCoverage(workdir='build/taskcoach'))
f.addStep(tcbuild.IntegrationTests(workdir='build/taskcoach'))
f.addStep(tcbuild.LanguageTests(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildEXE(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadEXE(workdir='build/taskcoach'))

b = {'name': "win32-trunk",
     'slavename': "WinXPSP3",
     'builddir': "trunk-win32",
     'factory': f,
     }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(svnurl=BASEURL + 'trunk'))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.Revision(workdir='build/taskcoach'))
f.addStep(tcbuild.UnitTests(workdir='build/taskcoach'))
f.addStep(tcbuild.Epydoc(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadDoc(workdir='build/taskcoach'))
f.addStep(tcbuild.Coverage(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadCoverage(workdir='build/taskcoach'))
f.addStep(tcbuild.IntegrationTests(workdir='build/taskcoach'))
f.addStep(tcbuild.LanguageTests(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildSource(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadSourceTar(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadSourceZip(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildDEB(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadDEB(workdir='build/taskcoach'))

b = {'name': "ubuntu8-trunk",
     'slavename': "Ubuntu8",
     'builddir': "trunk-ubuntu8",
     'factory': f,
     }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(svnurl=BASEURL + 'trunk'))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.Revision(workdir='build/taskcoach'))
f.addStep(tcbuild.UnitTests(workdir='build/taskcoach'))
f.addStep(tcbuild.Epydoc(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadDoc(workdir='build/taskcoach'))
f.addStep(tcbuild.Coverage(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadCoverage(workdir='build/taskcoach'))
f.addStep(tcbuild.IntegrationTests(workdir='build/taskcoach'))
f.addStep(tcbuild.LanguageTests(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildSource(workdir='build/taskcoach'))
#f.addStep(tcbuild.UploadSourceTar(workdir='build/taskcoach'))
#f.addStep(tcbuild.UploadSourceZip(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildDEB(workdir='build/taskcoach'))
#f.addStep(tcbuild.UploadDEB(workdir='build/taskcoach'))

b = {'name': "ubuntu9-trunk",
     'slavename': "Ubuntu9",
     'builddir': "trunk-ubuntu9",
     'factory': f,
     }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(svnurl=BASEURL + 'trunk'))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.Revision(workdir='build/taskcoach'))
f.addStep(tcbuild.UnitTests(workdir='build/taskcoach'))
f.addStep(tcbuild.Coverage(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadCoverage(workdir='build/taskcoach'))
f.addStep(tcbuild.IntegrationTests(workdir='build/taskcoach'))
f.addStep(tcbuild.LanguageTests(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildRPM(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadRPM(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadSRPM(workdir='build/taskcoach'))
# The RPM build somehow prevents the following Fedora build if we
# don't clean up things...
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.Revision(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildFedora8(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadFedora8(workdir='build/taskcoach'))

b = {'name': "fedora8-trunk",
     'slavename': "Fedora8",
     'builddir': "trunk-fedora8",
     'factory': f,
     }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(svnurl=BASEURL + 'trunk'))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.Revision(workdir='build/taskcoach'))
## f.addStep(tcbuild.UnitTests(workdir='build/taskcoach'))
## f.addStep(tcbuild.Coverage(workdir='build/taskcoach'))
## f.addStep(tcbuild.UploadCoverage(workdir='build/taskcoach'))
f.addStep(tcbuild.IntegrationTests(workdir='build/taskcoach'))
f.addStep(tcbuild.LanguageTests(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildFedora11(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadFedora11(workdir='build/taskcoach'))

b = {'name': "fedora11-trunk",
     'slavename': "Fedora11",
     'builddir': "trunk-fedora11",
     'factory': f,
     }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(svnurl=BASEURL + 'trunk'))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.Revision(workdir='build/taskcoach'))
## f.addStep(tcbuild.UnitTests(workdir='build/taskcoach'))
## f.addStep(tcbuild.IntegrationTests(workdir='build/taskcoach'))
f.addStep(tcbuild.LanguageTests(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildDMG(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadDMG(workdir='build/taskcoach'))

b = {'name': "macos-trunk",
     'slavename': "MacOS",
     'builddir': "trunk-macos",
     'factory': f,
     }

c['builders'].append(b)

# iPhone 2.0 app branch

f = factory.BuildFactory()

f.addStep(SVN(baseURL=BASEURL))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.Revision(workdir='build/taskcoach'))
f.addStep(tcbuild.UnitTests(workdir='build/taskcoach'))
f.addStep(tcbuild.Coverage(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadCoverage(workdir='build/taskcoach'))
f.addStep(tcbuild.IntegrationTests(workdir='build/taskcoach'))
f.addStep(tcbuild.LanguageTests(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildEXE(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadEXE(workdir='build/taskcoach'))

b = {'name': "win32-iphone",
     'slavename': "WinXPSP3",
     'builddir': "iphone-win32",
     'factory': f,
     }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(baseURL=BASEURL))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.Revision(workdir='build/taskcoach'))
f.addStep(tcbuild.UnitTests(workdir='build/taskcoach'))
f.addStep(tcbuild.Epydoc(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadDoc(workdir='build/taskcoach'))
f.addStep(tcbuild.Coverage(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadCoverage(workdir='build/taskcoach'))
f.addStep(tcbuild.IntegrationTests(workdir='build/taskcoach'))
f.addStep(tcbuild.LanguageTests(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildSource(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadSourceTar(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadSourceZip(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildDEB(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadDEB(workdir='build/taskcoach'))

b = {'name': "ubuntu8-iphone",
     'slavename': "Ubuntu8",
     'builddir': "iphone-ubuntu8",
     'factory': f,
     }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(baseURL=BASEURL))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.Revision(workdir='build/taskcoach'))
f.addStep(tcbuild.UnitTests(workdir='build/taskcoach'))
f.addStep(tcbuild.Epydoc(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadDoc(workdir='build/taskcoach'))
f.addStep(tcbuild.Coverage(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadCoverage(workdir='build/taskcoach'))
f.addStep(tcbuild.IntegrationTests(workdir='build/taskcoach'))
f.addStep(tcbuild.LanguageTests(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildSource(workdir='build/taskcoach'))
#f.addStep(tcbuild.UploadSourceTar(workdir='build/taskcoach'))
#f.addStep(tcbuild.UploadSourceZip(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildDEB(workdir='build/taskcoach'))
#f.addStep(tcbuild.UploadDEB(workdir='build/taskcoach'))

b = {'name': "ubuntu9-iphone",
     'slavename': "Ubuntu9",
     'builddir': "iphone-ubuntu9",
     'factory': f,
     }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(baseURL=BASEURL))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.Revision(workdir='build/taskcoach'))
f.addStep(tcbuild.UnitTests(workdir='build/taskcoach'))
f.addStep(tcbuild.Coverage(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadCoverage(workdir='build/taskcoach'))
f.addStep(tcbuild.IntegrationTests(workdir='build/taskcoach'))
f.addStep(tcbuild.LanguageTests(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildRPM(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadRPM(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadSRPM(workdir='build/taskcoach'))
# The RPM build somehow prevents the following Fedora build if we
# don't clean up things...
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.Revision(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildFedora8(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadFedora8(workdir='build/taskcoach'))

b = {'name': "fedora8-iphone",
     'slavename': "Fedora8",
     'builddir': "iphone-fedora8",
     'factory': f,
     }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(baseURL=BASEURL))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.Revision(workdir='build/taskcoach'))
## f.addStep(tcbuild.UnitTests(workdir='build/taskcoach'))
## f.addStep(tcbuild.Coverage(workdir='build/taskcoach'))
## f.addStep(tcbuild.UploadCoverage(workdir='build/taskcoach'))
f.addStep(tcbuild.IntegrationTests(workdir='build/taskcoach'))
f.addStep(tcbuild.LanguageTests(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildFedora11(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadFedora11(workdir='build/taskcoach'))

b = {'name': "fedora11-iphone",
     'slavename': "Fedora11",
     'builddir': "iphone-fedora11",
     'factory': f,
     }

c['builders'].append(b)

f = factory.BuildFactory()

f.addStep(SVN(baseURL=BASEURL))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.Revision(workdir='build/taskcoach'))
## f.addStep(tcbuild.UnitTests(workdir='build/taskcoach'))
## f.addStep(tcbuild.IntegrationTests(workdir='build/taskcoach'))
f.addStep(tcbuild.LanguageTests(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildDMG(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadDMG(workdir='build/taskcoach'))

b = {'name': "macos-iphone",
     'slavename': "MacOS",
     'builddir': "iphone-macos",
     'factory': f,
     }

c['builders'].append(b)

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="fraca7@free.fr",
                                     sendToInterestedUsers=True,
                                     mode='failing',
                                     relayhost='smtp.free.fr',
                                     lookup=tcbuild.TaskCoachEmailLookup()))

from buildbot.status.client import PBListener
c['status'].append(PBListener(port=8011, user='taskcoach', passwd=PASSWORD))

####### PROJECT IDENTITY

c['projectName'] = "TaskCoach"
c['projectURL'] = "http://www.taskcoach.org/"

c['buildbotURL'] = "http://www.fraca7.net:8010/"
