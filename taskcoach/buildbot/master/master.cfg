# -*- python -*-

c = BuildmasterConfig = {}

BASEURL = 'http://taskcoach.svn.sourceforge.net/svnroot/taskcoach/'

PASSWORD = file('.passwd', 'rb').readlines()[0].strip()

CURRENTRELEASE='0_78'

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave

c['slaves'] = [BuildSlave("WinXPSP3", PASSWORD, max_builds=1),
               BuildSlave("Ubuntu8", PASSWORD, max_builds=1),
               BuildSlave("Ubuntu9", PASSWORD, max_builds=1),
               BuildSlave("Ubuntu9_x64", PASSWORD, max_builds=1),
               BuildSlave("Fedora8", PASSWORD, max_builds=1),
               BuildSlave("Fedora11", PASSWORD, max_builds=1),
               BuildSlave("MacOS", PASSWORD, max_builds=1)]

c['slavePortnum'] = 9989

####### CHANGESOURCES

# SourceForge does not (yet) provide a buildbot notification
# post-commit hook. There is a feature request for this though
# (https://sourceforge.net/tracker/?func=detail&aid=1633682&group_id=1&atid=350001)

#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

from buildbot.changes.svnpoller import SVNPoller, split_file_branches
c['change_source'] = SVNPoller(BASEURL,
                               pollinterval=10*60,
                               split_file=split_file_branches)

####### SCHEDULERS

from buildbot.scheduler import Scheduler

c['schedulers'] = []
c['schedulers'].append(Scheduler(name="TrunkWin32", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["win32-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseWin32", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["win32-rel"]))
c['schedulers'].append(Scheduler(name="iPhone2Win32", branch='branches/Feature_iPhone_2',
                                 treeStableTimer=0,
                                 builderNames=["win32-iphone"]))

c['schedulers'].append(Scheduler(name="TrunkUbuntu8", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["ubuntu8-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseUbuntu8", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["ubuntu8-rel"]))
c['schedulers'].append(Scheduler(name="iPhone2Ubuntu8", branch='branches/Feature_iPhone_2',
                                 treeStableTimer=0,
                                 builderNames=["ubuntu8-iphone"]))

c['schedulers'].append(Scheduler(name="TrunkUbuntu9", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["ubuntu9-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseUbuntu9", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["ubuntu9-rel"]))
c['schedulers'].append(Scheduler(name="iPhone2Ubuntu9", branch='branches/Feature_iPhone_2',
                                 treeStableTimer=0,
                                 builderNames=["ubuntu9-iphone"]))

c['schedulers'].append(Scheduler(name="TrunkUbuntu9_x64", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["ubuntu9_x64-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseUbuntu9_x64", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["ubuntu9_x64-rel"]))
c['schedulers'].append(Scheduler(name="iPhone2Ubuntu9_x64", branch='branches/Feature_iPhone_2',
                                 treeStableTimer=0,
                                 builderNames=["ubuntu9_x64-iphone"]))

c['schedulers'].append(Scheduler(name="TrunkFedora8", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["fedora8-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseFedora8", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["fedora8-rel"]))
c['schedulers'].append(Scheduler(name="iPhone2Fedora8", branch='branches/Feature_iPhone_2',
                                 treeStableTimer=0,
                                 builderNames=["fedora8-iphone"]))

c['schedulers'].append(Scheduler(name="TrunkFedora11", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["fedora11-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseFedora11", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["fedora11-rel"]))
c['schedulers'].append(Scheduler(name="iPhone2Fedora11", branch='branches/Feature_iPhone_2',
                                 treeStableTimer=0,
                                 builderNames=["fedora11-iphone"]))

c['schedulers'].append(Scheduler(name="TrunkMacOS", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["macos-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseMacOS", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["macos-rel"]))
c['schedulers'].append(Scheduler(name="iPhone2MacOS", branch='branches/Feature_iPhone_2',
                                 treeStableTimer=0,
                                 builderNames=["macos-iphone"]))

####### BUILDERS

import os, sys
sys.path.insert(0, os.getcwd())
import tcbuild

from buildbot.process import factory
from buildbot.steps.source import SVN
from buildbot.steps.shell import Compile

c['builders'] = []

# For  each  branch,  all  platforms  should at  least  make  cleanup,
# revision, integration, the  platform-specific package or the generic
# package used  on this platform,  and distribution tests.  Unit tests
# are skipped for  some platforms (MacOS and Fedora11)  due to unknown
# circumstances making them crash randomly.

# Each generic  package format may  be used by several  platforms, but
# only one build is uploaded to the master: the Fedora 8 build for RPM
# and SRPM and the Ubuntu 8 build for DEB.

# Coverage tests  must only be run  on different OSes (no  need to run
# then  on Fedora if  they are  run on  Ubuntu), so  they run  only on
# Ubuntu 8 and Win32 (not MacOS since the unit tests can't be launched
# from the slave there).

# Language tests, documentation generation and source (tar.gz and zip)
# need only be run on one platform; this would be Ubuntu 8.

def addCommonStartSteps(f, skipUnitTests=False, skipIntegrationTests=False, **kwargs):
    f.addStep(tcbuild.Cleanup, **kwargs)
    f.addStep(tcbuild.Revision, **kwargs)
    if not skipUnitTests:
        f.addStep(tcbuild.UnitTests, **kwargs)
    if not skipIntegrationTests:
        f.addStep(tcbuild.IntegrationTests, **kwargs)

def addCommonEndSteps(f, **kwargs):
    f.addStep(tcbuild.DistributionTests, **kwargs)

BRANCHES = ['trunk', 'rel', 'iphone']

for branch in BRANCHES:
    if branch == 'trunk':
        svnargs = dict(svnurl=BASEURL + 'trunk')
    else:
        svnargs = dict(baseURL=BASEURL)

    # Win32

    f = factory.BuildFactory()

    f.addStep(SVN, **svnargs)
    addCommonStartSteps(f, workdir='build/taskcoach')
    f.addStep(tcbuild.Coverage, workdir='build/taskcoach')
    f.addStep(tcbuild.UploadCoverage, workdir='build/taskcoach')
    f.addStep(tcbuild.BuildEXE, workdir='build/taskcoach')
    f.addStep(tcbuild.UploadEXE, workdir='build/taskcoach')
    addCommonEndSteps(f, workdir='build/taskcoach')

    c['builders'].append(dict(name='win32-%s' % branch,
                              slavename='WinXPSP3',
                              builddir='%s-win32' % branch,
                              factory=f))

    # Ubuntu 8

    f = factory.BuildFactory()

    f.addStep(SVN, **svnargs)
    addCommonStartSteps(f, workdir='build/taskcoach')
    f.addStep(tcbuild.LanguageTests, workdir='build/taskcoach')
    f.addStep(tcbuild.Coverage, workdir='build/taskcoach')
    f.addStep(tcbuild.UploadCoverage, workdir='build/taskcoach')
    f.addStep(tcbuild.Epydoc, workdir='build/taskcoach')
    f.addStep(tcbuild.UploadDoc, workdir='build/taskcoach')
    f.addStep(tcbuild.BuildSource, workdir='build/taskcoach')
    f.addStep(tcbuild.UploadSourceTar, workdir='build/taskcoach')
    f.addStep(tcbuild.UploadSourceZip, workdir='build/taskcoach')
    f.addStep(tcbuild.BuildDEB, workdir='build/taskcoach')
    f.addStep(tcbuild.UploadDEB, workdir='build/taskcoach')
    addCommonEndSteps(f, workdir='build/taskcoach')

    c['builders'].append(dict(name='ubuntu8-%s' % branch,
                              slavename='Ubuntu8',
                              builddir='%s-ubuntu8' % branch,
                              factory=f))

    # Ubuntu 9

    f = factory.BuildFactory()

    f.addStep(SVN, **svnargs)
    addCommonStartSteps(f, workdir='build/taskcoach')
    f.addStep(tcbuild.BuildDEB, workdir='build/taskcoach')
    addCommonEndSteps(f, workdir='build/taskcoach')

    c['builders'].append(dict(name='ubuntu9-%s' % branch,
                              slavename='Ubuntu9',
                              builddir='%s-ubuntu9' % branch,
                              factory=f))

    # Ubuntu 9, 64 bits

    f = factory.BuildFactory()

    f.addStep(SVN, **svnargs)
    addCommonStartSteps(f, workdir='build/taskcoach')
    f.addStep(tcbuild.BuildDEB, workdir='build/taskcoach')
    addCommonEndSteps(f, workdir='build/taskcoach')

    c['builders'].append(dict(name='ubuntu9_x64-%s' % branch,
                              slavename='Ubuntu9_x64',
                              builddir='%s-ubuntu9_x64' % branch,
                              factory=f))

    # Fedora 8

    f = factory.BuildFactory()

    f.addStep(SVN, **svnargs)
    addCommonStartSteps(f, workdir='build/taskcoach')
    f.addStep(tcbuild.BuildRPM, workdir='build/taskcoach')
    f.addStep(tcbuild.UploadRPM, workdir='build/taskcoach')
    f.addStep(tcbuild.UploadSRPM, workdir='build/taskcoach')
    # The RPM build somehow prevents the following Fedora build if we
    # don't clean up things...
    f.addStep(tcbuild.Cleanup, workdir='build/taskcoach')
    f.addStep(tcbuild.Revision, workdir='build/taskcoach')
    f.addStep(tcbuild.BuildFedora8, workdir='build/taskcoach')
    f.addStep(tcbuild.UploadFedora8, workdir='build/taskcoach')
    addCommonEndSteps(f, workdir='build/taskcoach')

    c['builders'].append(dict(name='fedora8-%s' % branch,
                              slavename='Fedora8',
                              builddir='%s-fedora8' % branch,
                              factory=f))

    # Fedora 11

    f = factory.BuildFactory()

    f.addStep(SVN, **svnargs)
    addCommonStartSteps(f, skipUnitTests=True, workdir='build/taskcoach')
    f.addStep(tcbuild.BuildFedora11, workdir='build/taskcoach')
    f.addStep(tcbuild.UploadFedora11, workdir='build/taskcoach')
    addCommonEndSteps(f, workdir='build/taskcoach')

    c['builders'].append(dict(name='fedora11-%s' % branch,
                              slavename='Fedora11',
                              builddir='%s-fedora11' % branch,
                              factory=f))

    # MacOS

    f = factory.BuildFactory()

    f.addStep(SVN, **svnargs)
    addCommonStartSteps(f, skipUnitTests=True, skipIntegrationTests=True, workdir='build/taskcoach')
    f.addStep(tcbuild.BuildDMG, workdir='build/taskcoach')
    f.addStep(tcbuild.UploadDMG, workdir='build/taskcoach')
    addCommonEndSteps(f, workdir='build/taskcoach')

    c['builders'].append(dict(name='macos-%s' % branch,
                              slavename='MacOS',
                              builddir='%s-macos' % branch,
                              factory=f))

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="fraca7@free.fr",
                                     sendToInterestedUsers=True,
                                     mode='failing',
                                     relayhost='smtp.free.fr',
                                     lookup=tcbuild.TaskCoachEmailLookup()))

from buildbot.status.client import PBListener
c['status'].append(PBListener(port=8011, user='taskcoach', passwd=PASSWORD))

####### PROJECT IDENTITY

c['projectName'] = "TaskCoach"
c['projectURL'] = "http://www.taskcoach.org/"

c['buildbotURL'] = "http://www.fraca7.net:8010/"
