# -*- python -*-

# Task Coach - Your friendly task manager
# Copyright (C) 2004-2010 Task Coach developers <developers@taskcoach.org>
#
# Task Coach is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Task Coach is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


c = BuildmasterConfig = {}

BASEURL = 'http://taskcoach.svn.sourceforge.net/svnroot/taskcoach/'

PASSWORD = file('.passwd', 'rb').readlines()[0].strip()

CURRENTRELEASE='0_78'

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave

c['slaves'] = [BuildSlave("WinXPSP3", PASSWORD, max_builds=1),
               BuildSlave("Ubuntu8", PASSWORD, max_builds=1),
               BuildSlave("Fedora8", PASSWORD, max_builds=1),
               BuildSlave("Fedora11", PASSWORD, max_builds=1),
               BuildSlave("MacOS", PASSWORD, max_builds=1)]

c['slavePortnum'] = 9989

####### CHANGESOURCES

# SourceForge does not (yet) provide a buildbot notification
# post-commit hook. There is a feature request for this though
# (https://sourceforge.net/tracker/?func=detail&aid=1633682&group_id=1&atid=350001)

#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

from buildbot.changes.svnpoller import SVNPoller, split_file_branches
c['change_source'] = SVNPoller(BASEURL,
                               pollinterval=10*60,
                               split_file=split_file_branches)

####### SCHEDULERS

from buildbot.scheduler import Scheduler

c['schedulers'] = []
c['schedulers'].append(Scheduler(name="TrunkWin32", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["win32-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseWin32", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["win32-rel"]))

c['schedulers'].append(Scheduler(name="TrunkUbuntu8", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["ubuntu8-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseUbuntu8", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["ubuntu8-rel"]))

c['schedulers'].append(Scheduler(name="TrunkFedora8", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["fedora8-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseFedora8", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["fedora8-rel"]))

c['schedulers'].append(Scheduler(name="TrunkFedora11", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["fedora11-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseFedora11", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["fedora11-rel"]))

c['schedulers'].append(Scheduler(name="TrunkMacOS", branch=None,
                                 treeStableTimer=0,
                                 builderNames=["macos-trunk"]))
c['schedulers'].append(Scheduler(name="LastReleaseMacOS", branch='branches/Release%s_Branch' % CURRENTRELEASE,
                                 treeStableTimer=0,
                                 builderNames=["macos-rel"]))

####### BUILDERS

import os, sys
sys.path.insert(0, os.getcwd())
import tcbuild

from buildbot.process import factory
from buildbot.steps.source import SVN
from buildbot.steps.shell import Compile

c['builders'] = []

# For  each  branch,  all  platforms  should at  least  make  cleanup,
# revision, integration, the  platform-specific package or the generic
# package used  on this platform,  and distribution tests.  Unit tests
# are skipped for  some platforms (MacOS and Fedora11)  due to unknown
# circumstances making them crash randomly.

# Each generic  package format may  be used by several  platforms, but
# only one build is uploaded to the master: the Fedora 8 build for RPM
# and SRPM and the Ubuntu 8 build for DEB.

# Coverage tests  must only be run  on different OSes (no  need to run
# then  on Fedora if  they are  run on  Ubuntu), so  they run  only on
# Ubuntu 8 and Win32 (not MacOS since the unit tests can't be launched
# from the slave there).

# Language tests, documentation generation and source (tar.gz and zip)
# need only be run on one platform; this would be Ubuntu 8.

def addCommonStartSteps(f, skipUnitTests=False, skipIntegrationTests=False, **kwargs):
    f.addStep(tcbuild.Cleanup, **kwargs)
    f.addStep(tcbuild.Revision, **kwargs)
    if not skipUnitTests:
        f.addStep(tcbuild.UnitTests, **kwargs)
    if not skipIntegrationTests:
        f.addStep(tcbuild.IntegrationTests, **kwargs)

def addCommonEndSteps(f, **kwargs):
    f.addStep(tcbuild.DistributionTests, **kwargs)

BRANCHES = ['trunk', 'rel']

for branch in BRANCHES:
    if branch == 'trunk':
        svnargs = dict(svnurl=BASEURL + 'trunk')
    else:
        svnargs = dict(baseURL=BASEURL)

    if branch == 'rel':
        # Release branch  are a copy of the  taskcoach subdirectory of
        # trunk while trunk is one level up...
        workdir = 'build'
    else:
        workdir = 'build/taskcoach'

    # Win32

    f = factory.BuildFactory()

    f.addStep(SVN, **svnargs)
    addCommonStartSteps(f, workdir=workdir)
    f.addStep(tcbuild.Coverage, workdir=workdir)
    f.addStep(tcbuild.UploadCoverage, workdir=workdir)
    f.addStep(tcbuild.BuildEXE, workdir=workdir)
    f.addStep(tcbuild.UploadEXE, workdir=workdir)
    addCommonEndSteps(f, workdir=workdir)

    c['builders'].append(dict(name='win32-%s' % branch,
                              slavename='WinXPSP3',
                              builddir='%s-win32' % branch,
                              factory=f))

    # Ubuntu 8

    f = factory.BuildFactory()

    f.addStep(SVN, **svnargs)
    addCommonStartSteps(f, workdir=workdir, skipUnitTests=True)
    f.addStep(tcbuild.LanguageTests, workdir=workdir)
    #f.addStep(tcbuild.Coverage, workdir=workdir)
    #f.addStep(tcbuild.UploadCoverage, workdir=workdir)
    f.addStep(tcbuild.Epydoc, workdir=workdir)
    f.addStep(tcbuild.UploadDoc, workdir=workdir)
    f.addStep(tcbuild.BuildSource, workdir=workdir)
    f.addStep(tcbuild.UploadSourceTar, workdir=workdir)
    f.addStep(tcbuild.UploadSourceZip, workdir=workdir)
    f.addStep(tcbuild.BuildDEB, workdir=workdir)
    f.addStep(tcbuild.UploadDEB, workdir=workdir)
    addCommonEndSteps(f, workdir=workdir)

    c['builders'].append(dict(name='ubuntu8-%s' % branch,
                              slavename='Ubuntu8',
                              builddir='%s-ubuntu8' % branch,
                              factory=f))

    # Fedora 8

    f = factory.BuildFactory()

    f.addStep(SVN, **svnargs)
    addCommonStartSteps(f, workdir=workdir)
    f.addStep(tcbuild.BuildRPM, workdir=workdir)
    f.addStep(tcbuild.UploadRPM, workdir=workdir)
    f.addStep(tcbuild.UploadSRPM, workdir=workdir)
    # The RPM build somehow prevents the following Fedora build if we
    # don't clean up things...
    f.addStep(tcbuild.Cleanup, workdir=workdir)
    f.addStep(tcbuild.Revision, workdir=workdir)
    f.addStep(tcbuild.BuildFedora8, workdir=workdir)
    f.addStep(tcbuild.UploadFedora8, workdir=workdir)
    addCommonEndSteps(f, workdir=workdir)

    c['builders'].append(dict(name='fedora8-%s' % branch,
                              slavename='Fedora8',
                              builddir='%s-fedora8' % branch,
                              factory=f))

    # Fedora 11

    f = factory.BuildFactory()

    f.addStep(SVN, **svnargs)
    addCommonStartSteps(f, skipUnitTests=True, workdir=workdir)
    f.addStep(tcbuild.BuildFedora11, workdir=workdir)
    f.addStep(tcbuild.UploadFedora11, workdir=workdir)
    addCommonEndSteps(f, workdir=workdir)

    c['builders'].append(dict(name='fedora11-%s' % branch,
                              slavename='Fedora11',
                              builddir='%s-fedora11' % branch,
                              factory=f))

    # MacOS

    f = factory.BuildFactory()

    f.addStep(SVN, **svnargs)
    addCommonStartSteps(f, skipUnitTests=True, skipIntegrationTests=True, workdir=workdir)
    f.addStep(tcbuild.BuildDMG, workdir=workdir)
    f.addStep(tcbuild.UploadDMG, workdir=workdir)
    addCommonEndSteps(f, workdir=workdir)

    c['builders'].append(dict(name='macos-%s' % branch,
                              slavename='MacOS',
                              builddir='%s-macos' % branch,
                              factory=f))

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="fraca7@free.fr",
                                     sendToInterestedUsers=True,
                                     mode='failing',
                                     relayhost='smtp.free.fr',
                                     lookup=tcbuild.TaskCoachEmailLookup()))

from buildbot.status.client import PBListener
c['status'].append(PBListener(port=8011, user='taskcoach', passwd=PASSWORD))

####### PROJECT IDENTITY

c['projectName'] = "TaskCoach"
c['projectURL'] = "http://www.taskcoach.org/"

c['buildbotURL'] = "http://www.fraca7.net:8010/"
