Only in pubsub-taskcoach/: .DS_Store
Only in pubsub-taskcoach/: LICENSE.txt
diff -r -u pubsub/core/listenerbase.py pubsub-taskcoach/core/listenerbase.py
--- pubsub/core/listenerbase.py	2009-11-08 22:13:00.000000000 +0100
+++ pubsub-taskcoach/core/listenerbase.py	2012-08-28 17:56:26.000000000 +0200
@@ -112,10 +112,14 @@
     def __notifyOnDead(self, ref):
         '''This gets called when listener weak ref has died. Propagate 
         info to Topic).'''
-        notifyDeath = self.__onDead
-        self._unlinkFromTopic_()
-        if notifyDeath is not None:
-            notifyDeath(self)
+        try:
+            notifyDeath = self.__onDead
+        except AttributeError:
+            pass
+        else:
+            self._unlinkFromTopic_()
+            if notifyDeath is not None:
+                notifyDeath(self)
 
     def __eq__(self, rhs):
         '''Compare for equality to rhs. This returns true if rhs has our id id(rhs) is
diff -r -u pubsub/core/topicobj.py pubsub-taskcoach/core/topicobj.py
--- pubsub/core/topicobj.py	2010-08-22 22:42:04.000000000 +0200
+++ pubsub-taskcoach/core/topicobj.py	2012-08-28 17:52:49.000000000 +0200
@@ -67,7 +67,9 @@
         PublisherMixin.__init__(self)
 
         self.__validator    = None
-        self.__listeners    = []
+        # dict() and not set() because of the Listener.__eq__ trick: this structure
+        # stores Listener instances but we lookup actual callbacks.
+        self.__listeners    = dict()
 
         # specification:
         self.__description  = None
@@ -226,12 +228,12 @@
     def hasListeners(self):
         '''Return true if there are any listeners subscribed to
         this topic, false otherwise.'''
-        return self.__listeners != []
+        return len(self.__listeners) != 0
 
     def getListeners(self):
         '''Get a **copy** of Listener objects for listeners
         subscribed to this topic.'''
-        return self.__listeners[:]
+        return self.__listeners.keys()
 
     def validate(self, listener):
         '''Checks whether listener could be subscribed to this topic:
@@ -256,8 +258,7 @@
         was not already subscribed and is now subscribed. '''
         if listener in self.__listeners:
             assert self.isSendable()
-            idx = self.__listeners.index(listener)
-            subdLisnr, newSub = self.__listeners[idx], False
+            subdLisnr, newSub = self.__listeners[listener], False
 
         else:
             if self.__validator is None:
@@ -266,7 +267,7 @@
             argsInfo = self.__validator.validate(listener)
             weakListener = Listener(
                 listener, argsInfo, onDead=self.__onDeadListener)
-            self.__listeners.append(weakListener)
+            self.__listeners[weakListener] = weakListener
             subdLisnr, newSub = weakListener, True
 
         # notify of subscription
@@ -282,12 +283,12 @@
         notifyUnsubscribe(listener, self) on all registered notification
         handlers (see pub.addNotificationHandler)'''
         try:
-            idx = self.__listeners.index(listener)
-        except ValueError:
+            unsubdLisnr = self.__listeners[listener]
+        except KeyError:
             return None
 
-        unsubdLisnr = self.__listeners.pop(idx)
         unsubdLisnr._unlinkFromTopic_()
+        del self.__listeners[unsubdLisnr]
         assert listener == unsubdLisnr.getCallable()
 
         # notify of unsubscription
@@ -300,16 +301,13 @@
         be a function that takes a listener and returns true if the listener
         should be unsubscribed. Returns the list of listeners that were
         unsubscribed.'''
-        index = 0
         unsubd = []
-        for listener in self.__listeners[:] :
+        for listener in self.__listeners.keys() :
             if filter is None or filter(listener):
                 listener._unlinkFromTopic_()
-                assert listener is self.__listeners[index]
-                del self.__listeners[index]
+                assert listener is self.__listeners[listener]
+                del self.__listeners[listener]
                 unsubd.append(listener)
-            else:
-                index += 1
 
         # send notification regarding all listeners actually unsubscribed
         notificationMgr = self._treeConfig.notificationMgr
@@ -423,10 +421,9 @@
     def __onDeadListener(self, weakListener):
         '''One of our subscribed listeners has died, so remove it and notify others'''
         # remove:
-        ll = self.__listeners.index(weakListener)
-        pubListener = self.__listeners[ll]
+        pubListener = self.__listeners[weakListener]
         #llID = str(listener)
-        del self.__listeners[ll]
+        del self.__listeners[weakListener]
 
         # notify:
         self._treeConfig.notificationMgr.notifyDeadListener(pubListener, self)
